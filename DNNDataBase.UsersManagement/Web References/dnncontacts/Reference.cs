//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace import.dnncontacts {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ContactsSoap", Namespace="http://tempuri.org//SimpleService")]
    public partial class Contacts : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetContactsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDNNUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateContactOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateUserOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Contacts() {
            this.Url = global::import.Properties.Settings.Default.import_dnncontacts_Contacts;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetContactsCompletedEventHandler GetContactsCompleted;
        
        /// <remarks/>
        public event GetDNNUsersCompletedEventHandler GetDNNUsersCompleted;
        
        /// <remarks/>
        public event CreateContactCompletedEventHandler CreateContactCompleted;
        
        /// <remarks/>
        public event CreateUserCompletedEventHandler CreateUserCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org//SimpleService/GetContacts", RequestNamespace="http://tempuri.org//SimpleService", ResponseNamespace="http://tempuri.org//SimpleService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetContacts(int ModuleID, int wsmoduleid, string KeyCode) {
            object[] results = this.Invoke("GetContacts", new object[] {
                        ModuleID,
                        wsmoduleid,
                        KeyCode});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetContactsAsync(int ModuleID, int wsmoduleid, string KeyCode) {
            this.GetContactsAsync(ModuleID, wsmoduleid, KeyCode, null);
        }
        
        /// <remarks/>
        public void GetContactsAsync(int ModuleID, int wsmoduleid, string KeyCode, object userState) {
            if ((this.GetContactsOperationCompleted == null)) {
                this.GetContactsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetContactsOperationCompleted);
            }
            this.InvokeAsync("GetContacts", new object[] {
                        ModuleID,
                        wsmoduleid,
                        KeyCode}, this.GetContactsOperationCompleted, userState);
        }
        
        private void OnGetContactsOperationCompleted(object arg) {
            if ((this.GetContactsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetContactsCompleted(this, new GetContactsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org//SimpleService/GetDNNUsers", RequestNamespace="http://tempuri.org//SimpleService", ResponseNamespace="http://tempuri.org//SimpleService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetDNNUsers(int PortalID, int ModuleID, int wsmoduleid, string KeyCode) {
            object[] results = this.Invoke("GetDNNUsers", new object[] {
                        PortalID,
                        ModuleID,
                        wsmoduleid,
                        KeyCode});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDNNUsersAsync(int PortalID, int ModuleID, int wsmoduleid, string KeyCode) {
            this.GetDNNUsersAsync(PortalID, ModuleID, wsmoduleid, KeyCode, null);
        }
        
        /// <remarks/>
        public void GetDNNUsersAsync(int PortalID, int ModuleID, int wsmoduleid, string KeyCode, object userState) {
            if ((this.GetDNNUsersOperationCompleted == null)) {
                this.GetDNNUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDNNUsersOperationCompleted);
            }
            this.InvokeAsync("GetDNNUsers", new object[] {
                        PortalID,
                        ModuleID,
                        wsmoduleid,
                        KeyCode}, this.GetDNNUsersOperationCompleted, userState);
        }
        
        private void OnGetDNNUsersOperationCompleted(object arg) {
            if ((this.GetDNNUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDNNUsersCompleted(this, new GetDNNUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org//SimpleService/CreateContact", RequestNamespace="http://tempuri.org//SimpleService", ResponseNamespace="http://tempuri.org//SimpleService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CreateContact(int itemId, int moduleid, string Name, string Role, string Email, string Contact1, string Contact2, int wsmoduleid, string KeyCode) {
            object[] results = this.Invoke("CreateContact", new object[] {
                        itemId,
                        moduleid,
                        Name,
                        Role,
                        Email,
                        Contact1,
                        Contact2,
                        wsmoduleid,
                        KeyCode});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CreateContactAsync(int itemId, int moduleid, string Name, string Role, string Email, string Contact1, string Contact2, int wsmoduleid, string KeyCode) {
            this.CreateContactAsync(itemId, moduleid, Name, Role, Email, Contact1, Contact2, wsmoduleid, KeyCode, null);
        }
        
        /// <remarks/>
        public void CreateContactAsync(int itemId, int moduleid, string Name, string Role, string Email, string Contact1, string Contact2, int wsmoduleid, string KeyCode, object userState) {
            if ((this.CreateContactOperationCompleted == null)) {
                this.CreateContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateContactOperationCompleted);
            }
            this.InvokeAsync("CreateContact", new object[] {
                        itemId,
                        moduleid,
                        Name,
                        Role,
                        Email,
                        Contact1,
                        Contact2,
                        wsmoduleid,
                        KeyCode}, this.CreateContactOperationCompleted, userState);
        }
        
        private void OnCreateContactOperationCompleted(object arg) {
            if ((this.CreateContactCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateContactCompleted(this, new CreateContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org//SimpleService/CreateUser", RequestNamespace="http://tempuri.org//SimpleService", ResponseNamespace="http://tempuri.org//SimpleService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateUser(
                    int PortalId, 
                    string UserName, 
                    string FirstName, 
                    string LastName, 
                    string Unit, 
                    string Street, 
                    string City, 
                    string Region, 
                    string PostalCode, 
                    string Country, 
                    string Telephone, 
                    string Email, 
                    string Password, 
                    bool Approved, 
                    string Cell, 
                    string Fax, 
                    string IM, 
                    string WebSite, 
                    int wsmoduleid, 
                    string KeyCode) {
            object[] results = this.Invoke("CreateUser", new object[] {
                        PortalId,
                        UserName,
                        FirstName,
                        LastName,
                        Unit,
                        Street,
                        City,
                        Region,
                        PostalCode,
                        Country,
                        Telephone,
                        Email,
                        Password,
                        Approved,
                        Cell,
                        Fax,
                        IM,
                        WebSite,
                        wsmoduleid,
                        KeyCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateUserAsync(
                    int PortalId, 
                    string UserName, 
                    string FirstName, 
                    string LastName, 
                    string Unit, 
                    string Street, 
                    string City, 
                    string Region, 
                    string PostalCode, 
                    string Country, 
                    string Telephone, 
                    string Email, 
                    string Password, 
                    bool Approved, 
                    string Cell, 
                    string Fax, 
                    string IM, 
                    string WebSite, 
                    int wsmoduleid, 
                    string KeyCode) {
            this.CreateUserAsync(PortalId, UserName, FirstName, LastName, Unit, Street, City, Region, PostalCode, Country, Telephone, Email, Password, Approved, Cell, Fax, IM, WebSite, wsmoduleid, KeyCode, null);
        }
        
        /// <remarks/>
        public void CreateUserAsync(
                    int PortalId, 
                    string UserName, 
                    string FirstName, 
                    string LastName, 
                    string Unit, 
                    string Street, 
                    string City, 
                    string Region, 
                    string PostalCode, 
                    string Country, 
                    string Telephone, 
                    string Email, 
                    string Password, 
                    bool Approved, 
                    string Cell, 
                    string Fax, 
                    string IM, 
                    string WebSite, 
                    int wsmoduleid, 
                    string KeyCode, 
                    object userState) {
            if ((this.CreateUserOperationCompleted == null)) {
                this.CreateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateUserOperationCompleted);
            }
            this.InvokeAsync("CreateUser", new object[] {
                        PortalId,
                        UserName,
                        FirstName,
                        LastName,
                        Unit,
                        Street,
                        City,
                        Region,
                        PostalCode,
                        Country,
                        Telephone,
                        Email,
                        Password,
                        Approved,
                        Cell,
                        Fax,
                        IM,
                        WebSite,
                        wsmoduleid,
                        KeyCode}, this.CreateUserOperationCompleted, userState);
        }
        
        private void OnCreateUserOperationCompleted(object arg) {
            if ((this.CreateUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateUserCompleted(this, new CreateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetContactsCompletedEventHandler(object sender, GetContactsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetContactsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetContactsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetDNNUsersCompletedEventHandler(object sender, GetDNNUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDNNUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDNNUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CreateContactCompletedEventHandler(object sender, CreateContactCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateContactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateContactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CreateUserCompletedEventHandler(object sender, CreateUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591